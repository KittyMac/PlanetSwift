//
// Autogenerated by gaxb at 11:23:55 PM on 01/11/15
//

import UIKit

public class Button: ButtonBase {

    lazy public var button: PlanetButton = self.makeButton()
    override public var control: UIControl? {
        get {
            return button
        }
        set {
            if newValue is PlanetButton {
                button = newValue as! PlanetButton
            }
        }
    }


    public func updateBackgroundColor(_ color: UIColor?, forstate state: UIControlState) {
        switch state {
        case .normal: button.backgroundColor = color
        case .selected: button.backgroundColorSelected = color
        case .highlighted: button.backgroundColorHighlighted = color
        case .disabled: button.backgroundColorDisabled = color
        case [.selected, .highlighted]: button.backgroundColorSelectedHighlighted = color
        default: break
        }
    }

    public func updateTitle(_ text: String?, forState state: UIControlState = .normal) {
        button.setTitle(text.map{ NSLocalizedString($0, comment:"") }, for:state)
    }

    public func makeButton() -> PlanetButton {
        if let type = type {
            return PlanetButton(type: UIButtonType(withPlanetButtonType: type))
        }
        return PlanetButton()
    }

    public override func gaxbPrepare() {
        super.gaxbPrepare()

        if onTouchUp != nil {
            button.addTarget(self, action: #selector(Button.buttonOnTouchUp(_:)), for: .touchUpInside)
        }
        if onTouchDown != nil {
            button.addTarget(self, action: #selector(Button.buttonOnTouchDown(_:)), for: .touchDown)
        }
        button.tintColor = tintColor

        updateTitle(title, forState: UIControlState())
        updateTitle(titleHighlighted, forState: .highlighted)
        updateTitle(titleSelected, forState: .selected)
        updateTitle(titleSelectedHighlighted, forState: [.selected, .highlighted])
        updateTitle(titleDisabled, forState: .disabled)

        button.setTitleColor(titleFontColor, for: UIControlState())
        button.setTitleColor(titleFontColorHighlighted, for: .highlighted)
        button.setTitleColor(titleFontColorSelected, for: .selected)
        button.setTitleColor(titleFontColorSelectedHighlighted, for: [.selected, .highlighted])
        button.setTitleColor(titleFontColorDisabled, for: .disabled)

        if titleFont != nil {
#if os(iOS)
            button.titleLabel?.font = UIFont(name: titleFont!, size: UIFont.systemFontSize)
#else
            button.titleLabel?.font = UIFont(name: titleFont!, size: 18)
#endif
        }
        if titleFontSize != nil {
            button.titleLabel?.font = button.titleLabel?.font.withSize(CGFloat(titleFontSize!))
        }

        if backgroundImage != nil {
            let img = UIImage(gaxbString: backgroundImage)
            button.setBackgroundImage(img, for: UIControlState())
        }
        if backgroundImageHighlighted != nil {
            let img = UIImage(gaxbString: backgroundImageHighlighted)
            button.setBackgroundImage(img, for: .highlighted)
        }
        if backgroundImageSelected != nil {
            let img = UIImage(gaxbString: backgroundImageSelected)
            button.setBackgroundImage(img, for: .selected)
        }
        if backgroundImageSelectedHighlighted != nil {
            let img = UIImage(gaxbString: backgroundImageSelectedHighlighted)
            button.setBackgroundImage(img, for: [.selected, .highlighted])
        }
        if backgroundImageDisabled != nil {
            let img = UIImage(gaxbString: backgroundImageDisabled)
            button.setBackgroundImage(img, for: .disabled)
        }

        if image != nil {
            let img = UIImage(gaxbString: image)
            button.setImage(img, for: UIControlState())
        }
        if imageHighlighted != nil {
            let img = UIImage(gaxbString: imageHighlighted!)
            button.setImage(img, for: .highlighted)
        }
        if imageSelected != nil {
            let img = UIImage(gaxbString: imageSelected)
            button.setImage(img, for: .selected)
        }
        if imageSelectedHighlighted != nil {
            let img = UIImage(gaxbString: imageSelectedHighlighted)
            button.setImage(img, for: [.selected, .highlighted])
        }
        if imageDisabled != nil {
            let img = UIImage(gaxbString: imageDisabled)
            button.setImage(img, for: .disabled)
        }

        if let imageSet = imageSet {
            let pathLength = imageSet.count
            let extensionLength = imageSet.components(separatedBy: ".").last?.count ?? 0
            let insertPosition = pathLength - extensionLength - ( extensionLength > 0 ? 1 : 0 )

           
            //let normalPath = imageSet.substring(to: imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)) + "_normal" + imageSet.substring(from: imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition))
            //let highlightedPath = imageSet.substring(to: imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)) + "_highlighted" + imageSet.substring(from: imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition))
            let normalPath = String(imageSet[..<imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)]) + "_normal" + String(imageSet[imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)...])
            let highlightedPath = String(imageSet[..<imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)]) + "_highlighted" + String(imageSet[imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)...])
            let selectedPath = String(imageSet[..<imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)]) + "_selected" + String(imageSet[imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)...])
            let selectedHighlightedPath = String(imageSet[..<imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)]) + "_selected_highlighted" + String(imageSet[imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)...])
            let disabledPath = String(imageSet[..<imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)]) + "_disabled" + String(imageSet[imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)...])
            
//            let selectedPath = imageSet.substring(to: imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)) + "_selected" + imageSet.substring(from: imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition))
//            let selectedHighlightedPath = imageSet.substring(to: imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)) + "_selected_highlighted" + imageSet.substring(from: imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition))
//            let disabledPath = imageSet.substring(to: imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition)) + "_disabled" + imageSet.substring(from: imageSet.characters.index(imageSet.startIndex, offsetBy: insertPosition))

            var img = UIImage(contentsOfFile: String(bundlePath: normalPath)) ?? UIImage(contentsOfFile: String(bundlePath: imageSet))
            button.setImage(img, for: UIControlState())
            img = UIImage(contentsOfFile: String(bundlePath: highlightedPath))
            button.setImage(img, for: .highlighted)
            img = UIImage(contentsOfFile: String(bundlePath: selectedPath))
            button.setImage(img, for: .selected)
            img = UIImage(contentsOfFile: String(bundlePath: selectedHighlightedPath))
            button.setImage(img, for: [.selected, .highlighted])
            img = UIImage(contentsOfFile: String(bundlePath: disabledPath))
            button.setImage(img, for: .disabled)
        }

        if let backgroundImageSet = backgroundImageSet {
            let pathLength = backgroundImageSet.count
            let extensionLength = backgroundImageSet.components(separatedBy: ".").last?.count ?? 0
            let insertPosition = pathLength - extensionLength - (extensionLength > 0 ? 1 : 0)

            let normalPath = String(backgroundImageSet[..<backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)]) + "_normal" + String(backgroundImageSet[backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)...])
            let highlightedPath = String(backgroundImageSet[..<backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)]) + "_highlighted" + String(backgroundImageSet[backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)...])
            let selectedPath = String(backgroundImageSet[..<backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)]) + "_selected" + String(backgroundImageSet[backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)...])
            let selectedHighlightedPath = String(backgroundImageSet[..<backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)]) + "_selected_highlighted" + String(backgroundImageSet[backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)...])
            let disabledPath = String(backgroundImageSet[..<backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)]) + "_disabled" + String(backgroundImageSet[backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)...])

//            let normalPath = backgroundImageSet.substring(to: backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)) + "_normal" + backgroundImageSet.substring(from: backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition))
//            let highlightedPath = backgroundImageSet.substring(to: backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)) + "_highlighted" + backgroundImageSet.substring(from: backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition))
//            let selectedPath = backgroundImageSet.substring(to: backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)) + "_selected" + backgroundImageSet.substring(from: backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition))
//            let selectedHighlightedPath = backgroundImageSet.substring(to: backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)) + "_selected_highlighted" + backgroundImageSet.substring(from: backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition))
//            let disabledPath = backgroundImageSet.substring(to: backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition)) + "_disabled" + backgroundImageSet.substring(from: backgroundImageSet.characters.index(backgroundImageSet.startIndex, offsetBy: insertPosition))

            var img = UIImage(contentsOfFile: String(bundlePath: normalPath)) ?? UIImage(contentsOfFile: String(bundlePath: backgroundImageSet))
            button.setBackgroundImage(img, for: UIControlState())
            img = UIImage(contentsOfFile: String(bundlePath: highlightedPath))
            button.setBackgroundImage(img, for: .highlighted)
            img = UIImage(contentsOfFile: String(bundlePath: selectedPath))
            button.setBackgroundImage(img, for: .selected)
            img = UIImage(contentsOfFile: String(bundlePath: selectedHighlightedPath))
            button.setBackgroundImage(img, for: [.selected, .highlighted])
            img = UIImage(contentsOfFile: String(bundlePath: disabledPath))
            button.setBackgroundImage(img, for: .disabled)
        }

        button.backgroundColorNormal = backgroundColor
        button.backgroundColorHighlighted = backgroundColorHighlighted
        button.backgroundColorSelected = backgroundColorSelected
        button.backgroundColorSelectedHighlighted = backgroundColorSelectedHighlighted
        button.backgroundColorDisabled = backgroundColorDisabled

        button.isToggle = isToggle
        if contentEdgeInsets != nil {
            button.contentEdgeInsets = contentEdgeInsets!
        }
        if titleEdgeInsets != nil {
            button.titleEdgeInsets = titleEdgeInsets!
        }
        if imageEdgeInsets != nil {
            button.imageEdgeInsets = imageEdgeInsets!
        }
    }

    @objc func buttonOnTouchUp(_ sender:UIButton!)
    {
        if onTouchUp != nil {
            let (scopeObject, name) = self.parseNotification(onTouchUp)
            if name != nil {
                NotificationCenter.`default`.post(name: Foundation.Notification.Name(rawValue: name!), object: scopeObject)  // todo scope
            }
        }
    }

    @objc func buttonOnTouchDown(_ sender:UIButton!)
    {
        if onTouchDown != nil {
            let (scopeObject, name) = self.parseNotification(onTouchDown)
            if name != nil {
                NotificationCenter.`default`.post(name: Foundation.Notification.Name(rawValue: name!), object: scopeObject)  // todo scope
            }
        }
    }
}
