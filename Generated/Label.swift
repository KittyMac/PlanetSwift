//
// Autogenerated by gaxb at 02:35:55 PM on 12/17/14
//

import UIKit

public class Label: LabelBase {
    
    lazy public var label = UILabel()
    override public var view: UIView {
        get {
            return label
        }
        set {
            if newValue is UILabel {
                label = newValue as! UILabel
            }
        }
    }
	
    public override func gaxbPrepare() {
        super.gaxbPrepare()
        var _paragraphStyle: NSMutableParagraphStyle?
        var paragraphStyle: NSMutableParagraphStyle {
            if _paragraphStyle == nil {
                _paragraphStyle = NSMutableParagraphStyle()
            }
            return _paragraphStyle!
        }
        
        if textColor != nil {
            label.textColor = textColor
        }
        if adjustsFontSizeToFitWidth != nil {
            label.adjustsFontSizeToFitWidth = adjustsFontSizeToFitWidth!
        }
        label.minimumScaleFactor = CGFloat(minimumScaleFactor)
        if numberOfLines != nil {
            label.numberOfLines = numberOfLines!
        }
        if textAlignment != nil {
			label.textAlignment = NSTextAlignment.fromPlanetUITextAlignment(textAlignment!)
        }
        if fontName != nil {
            label.font = UIFont(name: fontName!, size: UIFont.systemFontSize())
        }
        if fontSize != nil {
            label.font = label.font.fontWithSize(CGFloat(fontSize!))
        }
		if lineBreakMode != nil {
			label.lineBreakMode = NSLineBreakMode.fromPlanetUILineBreakMode(lineBreakMode!)
		}
        if lineSpacing != nil {
            paragraphStyle.lineSpacing = CGFloat(lineSpacing!)
        }
        
        let unwrappedText = text != nil ? text! : ""
        
        if _paragraphStyle != nil {
            var attributedString = NSMutableAttributedString(string: unwrappedText)
            let attributes = [NSParagraphStyleAttributeName : paragraphStyle]
            attributedString.setAttributes(attributes, range: NSRange(location: 0, length: attributedString.length))
            label.attributedText = attributedString
        } else {
            label.text = unwrappedText
        }
    }
    
    public func updateText(newText: String) {
        text = newText
        gaxbPrepare()
    }
    
}
