//
// Autogenerated by gaxb at 01:38:55 PM on 01/20/15
//

import UIKit

public class TextField: TextFieldBase {
    lazy public var textField = UITextField()
    lazy private var textFieldDelegate = TextFieldHelper()

    override public var view: UIView {
        get {
            if textField.delegate == nil {
                textField.delegate = textFieldDelegate
            }
            return textField
        }
        set {
            if newValue is UITextField {
                textField = newValue as UITextField
            }
        }
    }

	public class func textAlignmentToNSTextAlignment(alignment:PlanetUI.TextAlignment) -> NSTextAlignment {
		switch alignment {
		case .center:
			return NSTextAlignment.Center
		case .right:
			return NSTextAlignment.Right
		case .left:
			return NSTextAlignment.Left
		case .justified:
			return NSTextAlignment.Justified
		case .natural:
			return NSTextAlignment.Natural
		}
	}

    public override func gaxbPrepare() {
        super.gaxbPrepare()

        textFieldDelegate.textDelegate = self

        if text != nil {
            textField.text = text!
        }
        if placeholder != nil {
            textField.placeholder = placeholder!
        }
        if fontName != nil {
            textField.font = UIFont(name: fontName!, size: CGFloat(fontSize))
        }
        if textColor != nil {
            textField.textColor = textColor!
        }
        if textAlignment != nil {
			textField.textAlignment = TextField.textAlignmentToNSTextAlignment(textAlignment!)
        }
        if adjustsFontSizeToFitWidth != nil {
            textField.adjustsFontSizeToFitWidth = adjustsFontSizeToFitWidth!
        }
        if borderStyle != nil {
            switch borderStyle! {
            case PlanetUI.TextFieldBorderStyle.line:
                textField.borderStyle = .Line
            case PlanetUI.TextFieldBorderStyle.bezel:
                textField.borderStyle = .Bezel
            case PlanetUI.TextFieldBorderStyle.roundedRect:
                textField.borderStyle = .RoundedRect
            default:
                textField.borderStyle = .None
            }
        }

        textField.minimumFontSize = CGFloat(minimumFontSize)
    }

    func textFieldDidBeginEditing(textField: UITextField) {
        if onBeginEditing != nil {
            doNotification(onBeginEditing!)
        }
    }

    func textFieldDidEndEditing(textField: UITextField) {
        if onEndEditing != nil {
            doNotification(onEndEditing!)
        }
    }

    func textFieldShouldReturn(textField: UITextField) {
        if onReturnPressed != nil {
            doNotification(onReturnPressed!)
        }
    }

    func doNotification(note: String) {
        let (scopeObject: AnyObject?, name) = self.parseNotification(note)
        if name != nil {
            NSNotificationCenter.defaultCenter().postNotificationName(name!, object: scopeObject)
        }
    }
}

private class TextFieldHelper: NSObject, UITextFieldDelegate {
    weak var textDelegate: TextField?

    func textFieldDidBeginEditing(textField: UITextField) {

        if textDelegate != nil {
            textDelegate!.textFieldDidBeginEditing(textField)
        }
    }

    func textFieldDidEndEditing(textField: UITextField) {

        if textDelegate != nil {
            textDelegate!.textFieldDidEndEditing(textField)
        }
    }

    func textFieldShouldReturn(textField: UITextField) {

        if textDelegate != nil {
            textDelegate!.textFieldShouldReturn(textField)
        }
    }
}
