//
// Autogenerated by gaxb at 10:39:28 AM on 12/12/14
//

import UIKit

public protocol PlanetExternalView {
    func setAttribute(_ value: String, key: String)
    func gaxbPrepare()
    func gaxbDidPrepare()
}

open class View: ViewBase, CustomPlaygroundQuickLookable {
    lazy open var view = UIView()
    open var externalView : PlanetExternalView? = nil
    
    open override func customCopyTo(_ other:View) {
        if self.externalView != nil {
            other.view = self.view
            other.externalView = self.externalView
        }
    }
        
    private func swiftClassFromString(_ className: String) -> AnyClass! {
        if  let appName: String = Bundle.main.object(forInfoDictionaryKey: "CFBundleName") as! String? {
            return NSClassFromString("\(appName).\(className)")
        }
        return nil;
    }
    
    open override func setAttribute(_ value: String, key: String) {
        super.setAttribute(value, key: key)
        
        if key == "externalClass" && self.externalView == nil {
            let viewClass = swiftClassFromString(externalClass!) as! UIView.Type
            if let viewObject = viewClass.init() as UIView? {
                self.view = viewObject
                self.externalView = view as? PlanetExternalView
            }
        }
        
        externalView?.setAttribute(value, key: key)
    }

    open override func gaxbPrepare() {
		super.gaxbPrepare()
        
        if frame != nil {
            view.bounds = CGRect(x: 0, y: 0, width: frame!.size.width, height: frame!.size.height)
            view.center = CGPoint(x: frame!.midX, y: frame!.midY)
        }
        if backgroundColor != nil {
            view.layer.backgroundColor = backgroundColor!.cgColor
        }
        if alpha != nil {
            view.alpha = CGFloat(alpha!)
        }
        if clipsToBounds != nil {
            view.clipsToBounds = clipsToBounds!
        }
		if userInteractionEnabled != nil {
			view.isUserInteractionEnabled = userInteractionEnabled!
		}
        if hidden != nil {
            view.isHidden = hidden!
        }
        if tag != nil {
            view.tag = tag!
        }
		if contentMode != nil {
            view.contentMode = UIViewContentMode.fromPlanetUIContentMode(contentMode!)
        }
		if contentHuggingPriority != nil {
            view.setContentHuggingPriority(UILayoutPriority(Float(contentHuggingPriority!.x)), for: .horizontal)
            view.setContentHuggingPriority(UILayoutPriority(Float(contentHuggingPriority!.y)), for: .vertical)
		}
		if contentCompressionResistancePriority != nil {
            view.setContentCompressionResistancePriority(UILayoutPriority(Float(contentCompressionResistancePriority!.x)), for: .horizontal)
            view.setContentCompressionResistancePriority(UILayoutPriority(Float(contentCompressionResistancePriority!.y)), for: .vertical)
		}
        if borderColor != nil {
            view.layer.borderColor = borderColor!.cgColor
        }
        if borderWidth != nil {
            view.layer.borderWidth = CGFloat(borderWidth!)
        }
        if cornerRadius != nil {
            view.layer.cornerRadius = CGFloat(cornerRadius!)
        }
        if shadowOffset != nil {
            view.layer.shadowOffset = shadowOffset!
        }
        if shadowRadius != nil {
            view.layer.shadowRadius = CGFloat(shadowRadius!)
        }
        if shadowColor != nil {
            view.layer.shadowColor = shadowColor!.cgColor
        }
        if shadowOpacity != nil {
            view.layer.shadowOpacity = Float(shadowOpacity!)
        }
		if let masksToBounds = masksToBounds {
			view.layer.masksToBounds = masksToBounds
		}
        view.accessibilityIdentifier = id
        view.accessibilityLabel = accessibilityLabel
        view.accessibilityHint = accessibilityHint
        if let trait = accessibilityTraits {
            view.accessibilityTraits = UIAccessibilityTraits.fromPlanetUIAccessibilityTraits(trait: trait)
        }

        if view.superview == nil {
            findParentView()?.addSubview(view)
        }
        
        externalView?.gaxbPrepare()
    }
    
    open override func gaxbDidPrepare() {
        externalView?.gaxbDidPrepare()
    }

    internal func addSubview(_ child: UIView) {
        view.addSubview(child)
    }

	internal func findParentView() -> View? {
		var parent:GaxbElement? = self.parent
		while parent != nil {

			if let view = parent as? View {
				return view
			}

			parent = parent!.parent
		}
		return nil
	}

    public var customPlaygroundQuickLook: PlaygroundQuickLook {
        return .view(view)
    }
}
